package main

const (
	cacheStoresOutputFile = "zz_generated_cache_stores.go"
	cacheStoresTemplate   = `// Code generated by hack/generators/cache-stores/main.go; DO NOT EDIT.
// If you want to add a new type to the cache store, you need to add a new entry to the supportedTypes list in spec.go.
package store

import ( 
	"fmt"
	"sync"
	
	corev1 "k8s.io/api/core/v1"
	discoveryv1 "k8s.io/api/discovery/v1"
	netv1 "k8s.io/api/networking/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/tools/cache"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/kong/kubernetes-ingress-controller/v3/internal/gatewayapi"
	kongv1 "github.com/kong/kubernetes-ingress-controller/v3/pkg/apis/configuration/v1"
	kongv1alpha1 "github.com/kong/kubernetes-ingress-controller/v3/pkg/apis/configuration/v1alpha1"
	kongv1beta1 "github.com/kong/kubernetes-ingress-controller/v3/pkg/apis/configuration/v1beta1"
	incubatorv1alpha1 "github.com/kong/kubernetes-ingress-controller/v3/pkg/apis/incubator/v1alpha1"
	
)

// CacheStores stores cache.Store for all Kinds of k8s objects that
// the Ingress Controller reads.
type CacheStores struct {
	{{- range . }}
	{{ .StoreField | default .Type }} cache.Store
	{{- end }}

	l *sync.RWMutex
}

// NewCacheStores is a convenience function for CacheStores to initialize all attributes with new cache stores.
func NewCacheStores() CacheStores {
	return CacheStores{
		{{- range . }}
		{{ .StoreField | default .Type }}: cache.NewStore({{ if eq .KeyFunc "clusterWideKeyFunc" }}clusterWideKeyFunc{{ else }}namespacedKeyFunc{{ end }}),
		{{- end }}

		l: &sync.RWMutex{},
	}
}

// Get checks whether or not there's already some version of the provided object present in the cache.
func (c CacheStores) Get(obj runtime.Object) (item interface{}, exists bool, err error) {
	c.l.RLock()
	defer c.l.RUnlock()

	switch obj := obj.(type) {
	{{- range . }}
	case *{{ .Package }}.{{ .Type }}:
		return c.{{ .StoreField | default .Type }}.Get(obj)
	{{- end }}
	}
	return nil, false, fmt.Errorf("%T is not a supported cache object type", obj)
}

// Add stores a provided runtime.Object into the CacheStore if it's of a supported type.
// The CacheStore must be initialized (see NewCacheStores()) or this will panic.
func (c CacheStores) Add(obj runtime.Object) error {
	c.l.Lock()
	defer c.l.Unlock()

	switch obj := obj.(type) {
	{{- range . }}
	case *{{ .Package }}.{{ .Type }}:
		return c.{{ .StoreField | default .Type }}.Add(obj)
	{{- end }}	
	}
	return fmt.Errorf("cannot add unsupported kind %q to the store", obj.GetObjectKind().GroupVersionKind())
}

// Delete removes a provided runtime.Object from the CacheStore if it's of a supported type.
// The CacheStore must be initialized (see NewCacheStores()) or this will panic.
func (c CacheStores) Delete(obj runtime.Object) error {
	c.l.Lock()
	defer c.l.Unlock()

	switch obj := obj.(type) {
	{{- range . }}
	case *{{ .Package }}.{{ .Type }}:
		return c.{{ .StoreField | default .Type }}.Delete(obj)
	{{- end }}
	}
	return fmt.Errorf("cannot delete unsupported kind %q from the store", obj.GetObjectKind().GroupVersionKind())
}

// ListAllStores returns a list of all cache stores embedded in the struct.
func (c CacheStores) ListAllStores() []cache.Store {
	return []cache.Store{
		{{- range . }}
		c.{{ .StoreField | default .Type }},
		{{- end }}
	}
}

// SupportedTypes returns a list of supported types for the cache.
func (c CacheStores) SupportedTypes() []client.Object {
	return []client.Object{
		{{- range . }}
		&{{ .Package }}.{{ .Type }}{},
		{{- end }}
	}
}
`

	cacheStoresTestOutputFile = "zz_generated_cache_stores_test.go"
	cacheStoresTestTemplate   = `// Code generated by hack/generators/cache-stores/main.go; DO NOT EDIT.
// If you want to add a new type to the cache store, you need to add a new entry to the supportedTypes list in spec.go.
package store_test

import (
	"testing"

	"github.com/kong/kubernetes-ingress-controller/v3/internal/gatewayapi"
	kongv1 "github.com/kong/kubernetes-ingress-controller/v3/pkg/apis/configuration/v1"
	kongv1alpha1 "github.com/kong/kubernetes-ingress-controller/v3/pkg/apis/configuration/v1alpha1"
	"github.com/stretchr/testify/require"
	corev1 "k8s.io/api/core/v1"
	discoveryv1 "k8s.io/api/discovery/v1"
	netv1 "k8s.io/api/networking/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/kong/kubernetes-ingress-controller/v3/internal/store"
	kongv1beta1 "github.com/kong/kubernetes-ingress-controller/v3/pkg/apis/configuration/v1beta1"
	incubatorv1alpha1 "github.com/kong/kubernetes-ingress-controller/v3/pkg/apis/incubator/v1alpha1"
)

func TestCacheStores(t *testing.T) {
	testCases := []struct {
		name          string
		objectToStore client.Object
	}{
		{{ range . }}
		{
			name: "{{ .Type }}",
			objectToStore: &{{ .Package }}.{{ .Type }}{},
		},
		{{ end }}
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			s := store.NewCacheStores()
			err := s.Add(tc.objectToStore)
			require.NoError(t, err)

			storedObj, ok, err := s.Get(tc.objectToStore)
			require.NoError(t, err)
			require.True(t, ok)
			require.Equal(t, tc.objectToStore, storedObj)

			err = s.Delete(tc.objectToStore)
			require.NoError(t, err)

			_, ok, err = s.Get(tc.objectToStore)
			require.NoError(t, err, err)
			require.False(t, ok)
		})
	}
}
`
)
