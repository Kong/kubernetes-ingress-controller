package main

import (
	"fmt"
	"strings"

	"github.com/kong/kubernetes-ingress-controller/v2/internal/manager"
	"github.com/spf13/pflag"
)

// This program generates markdown documentation for the KIC executable's flags.
// It skips deprecated and hidden flags.
func main() {
	cfg := manager.Config{}
	flags := cfg.FlagSet()

	markdown := strings.Builder{}
	markdown.WriteString("<!-- This document is generated by KIC's 'generate.docs' make target, DO NOT EDIT -->\n\n")
	markdown.WriteString("## Flags\n\n")
	markdown.WriteString("| Flag | Type | Description | Default |\n")
	markdown.WriteString("| ---- | ---- | ----------- | ------- |\n")

	flags.VisitAll(func(flag *pflag.Flag) {
		// Skip deprecated and hidden flags.
		if flag.Deprecated != "" || flag.Hidden {
			return
		}

		name := fmt.Sprintf("`--%s`", flag.Name)
		typ := fmt.Sprintf("`%s`", flag.Value.Type())

		description := flag.Usage
		// Make sure the first letter is capitalized.
		if first := description[0]; first >= 'a' && first <= 'z' {
			description = strings.ToUpper(string(first)) + description[1:]
		}
		// Make sure the last character is a period.
		if last := description[len(description)-1]; last != '.' {
			description += "."
		}

		defaultValue := ""
		if flag.DefValue != "" {
			defaultValue = fmt.Sprintf("`%s`", flag.DefValue)
		}

		markdown.WriteString(fmt.Sprintf("| %s | %s | %s | %s |\n", name, typ, description, defaultValue))
	})

	fmt.Println(markdown.String())
}
