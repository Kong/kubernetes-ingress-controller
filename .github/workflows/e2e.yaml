name: e2e tests

on:
  schedule:
    - cron: '30 4 * * *'
  workflow_dispatch: {}

jobs:
  setup-e2e-tests:
    runs-on: ubuntu-latest
    outputs:
      test_names: ${{ steps.set_test_names.outputs.test_names }}
    steps:
      - uses: actions/checkout@v3
      - id: set_test_names
        name: Set test names
        working-directory: test/e2e/
        # grep magic described in https://unix.stackexchange.com/a/13472
        # sed to add the extra $ is because some of our test names overlap. we need it so the -run regex only matches one test
        run: |
          echo "test_names=$(grep -shoP "(?<=^func )(Test[a-zA-z_0-9]+)(?=\(t \*testing.T\) {)" * | sed -e "s/$/\$/"| jq -R . | jq -cs .)" >> $GITHUB_OUTPUT
      - name: Print test names
        run: echo "Test names ${{ steps.set_test_names.outputs.test_names }}"
  e2e-tests:
    runs-on: ubuntu-latest
    needs: setup-e2e-tests
    strategy:
      fail-fast: false
      matrix:
        kubernetes-version:
          - 'v1.21.14'
          - 'v1.22.15'
          - 'v1.23.13'
          - 'v1.24.7'
          - 'v1.25.3'
          - 'v1.26.0'
        test: ${{ fromJSON(needs.setup-e2e-tests.outputs.test_names) }}
    steps:
    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: Kong/kong-license@master
      id: license
      with:
        password: ${{ secrets.PULP_PASSWORD }}

    - name: run ${{ matrix.test }} - ${{ matrix.kubernetes-version }}
      run: make test.e2e
      env:
        TEST_KONG_CONTROLLER_IMAGE_OVERRIDE: "kong/nightly-ingress-controller:nightly"
        KONG_LICENSE_DATA: ${{ steps.license.outputs.license }}
        KONG_CLUSTER_VERSION: ${{ matrix.kubernetes-version }}
        E2E_TEST_RUN: ${{ matrix.test }}
        NCPU: 1 # it was found that github actions (specifically) did not seem to perform well when spawning
                # multiple kind clusters within a single job, so only 1 is allowed at a time.
        GOTESTSUM_JUNITFILE: "e2e-${{ matrix.kubernetes-version }}-tests.xml"

    - name: upload diagnostics
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: diagnostics-e2e-tests
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

    - name: collect test report
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: e2e-${{ matrix.kubernetes-version }}-tests.xml

  istio-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kubernetes-version:
          # v1.25 is the latest Kubernetes version supported by Istio: https://istio.io/latest/docs/releases/supported-releases/
          - 'v1.25.3'
          - 'v1.24.7'
        istio-version:
          - 'v1.16.1'
          - 'v1.15.4'
          - 'v1.14.6'
        exclude:
          # Istio v1.14 does not support Kubernetes v1.25: https://istio.io/latest/docs/releases/supported-releases/
          - kubernetes-version: 'v1.25.3'
            istio-version: 'v1.14.6'

    steps:
    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: Kong/kong-license@master
      id: license
      with:
        password: ${{ secrets.PULP_PASSWORD }}

    - name: run Istio tests
      run: make test.istio
      env:
        TEST_KONG_CONTROLLER_IMAGE_OVERRIDE: "kong/nightly-ingress-controller:nightly"
        KONG_LICENSE_DATA: ${{ steps.license.outputs.license }}
        KONG_CLUSTER_VERSION: ${{ matrix.kubernetes-version }}
        ISTIO_VERSION: ${{ matrix.istio-version }}
        NCPU: 1 # it was found that github actions (specifically) did not seem to perform well when spawning
                # multiple kind clusters within a single job, so only 1 is allowed at a time.
        GOTESTSUM_JUNITFILE: "istio-${{ matrix.kubernetes-version }}-${{ matrix.istio-version }}-tests.xml"

    - name: upload diagnostics
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: diagnostics-e2e-tests
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

    - name: collect test report
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: istio-${{ matrix.kubernetes-version }}-${{ matrix.istio-version }}-tests.xml

  setup-gke-cluster:
    environment: "gcloud"
    runs-on: ubuntu-latest
    outputs:
      cluster_name: ${{ steps.set_cluster_name.outputs.name }}
      cluster_name_raw: ${{ steps.set_cluster_name.outputs.name_raw }}
    strategy:
      fail-fast: false
      matrix:
       # the GKE setup script ignores the patch version here and uses the latest
       # but we still include it for consistency with the other E2E jobs
        kubernetes-version:
          - 'v1.24.7'
    steps:
      - uses: actions/checkout@v3
      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'
      - name: cache go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-codegen-
      - name: Set cluster name in env
        run: |
          echo "KUBERNETES_CLUSTER_NAME=$(printf "kic-%s" $(openssl rand -hex 12))" >> $GITHUB_ENV
      - name: Deploy ${{ env.KUBERNETES_CLUSTER_NAME }} GKE cluster ${{ matrix.kubernetes-version }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
          GOOGLE_LOCATION: ${{ secrets.GOOGLE_LOCATION }}
          KONG_CLUSTER_VERSION: ${{ matrix.kubernetes-version }}
          KUBERNETES_CLUSTER_NAME : ${{ env.KUBERNETES_CLUSTER_NAME }}
        run: go run hack/e2e/cluster/deploy/main.go
      - name: Set cluster name in job outputs
        id: set_cluster_name
        run: |
          echo "name=gke:${{ env.KUBERNETES_CLUSTER_NAME }}" >> $GITHUB_OUTPUT
          echo "name_raw=${{ env.KUBERNETES_CLUSTER_NAME }}" >> $GITHUB_OUTPUT

  e2e-gke-tests:
    environment: "gcloud"
    runs-on: ubuntu-latest
    needs:
    - setup-e2e-tests
    - setup-gke-cluster
    strategy:
      fail-fast: false
      matrix:
        test: ${{ fromJSON(needs.setup-e2e-tests.outputs.test_names) }}
    steps:
    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: Kong/kong-license@master
      id: license
      with:
        password: ${{ secrets.PULP_PASSWORD }}

    - name: run ${{ matrix.test }}
      run: make test.e2e.gke
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_LOCATION: ${{ secrets.GOOGLE_LOCATION }}
        E2E_TEST_RUN: ${{ matrix.test }}
        KONG_LICENSE_DATA: ${{ steps.license.outputs.license }}
        KUBERNETES_CLUSTER_NAME : ${{ needs.setup-gke-cluster.outputs.cluster_name }}
        GOTESTSUM_JUNITFILE: "gke-${{ matrix.test }}-tests.xml"

    - name: upload diagnostics
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: diagnostics-e2e-tests
        path: /tmp/ktf-diag*
        if-no-files-found: ignore
    
    - name: collect test report
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: gke-${{ matrix.name }}-tests.xml

  cleanup-gke-cluster:
    environment: "gcloud"
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
    - setup-gke-cluster
    - e2e-gke-tests
    steps:
    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Cleanup ${{ needs.setup-gke-cluster.outputs.cluster_name }} GKE cluster
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_LOCATION: ${{ secrets.GOOGLE_LOCATION }}
        KUBERNETES_CLUSTER_NAME : ${{ needs.setup-gke-cluster.outputs.cluster_name_raw }}
      run: go run hack/e2e/cluster/deploy/main.go cleanup

  buildpulse-report:
    needs:
      - "e2e-tests"
      - "e2e-gke-tests"
      - "istio-tests"
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: download tests report
        id: download-coverage
        uses: actions/download-artifact@v3
        with:
          name: tests-report
          path: report

      - name: Upload test results to BuildPulse for flaky test detection
        if: ${{ !cancelled() }}
        uses: Workshop64/buildpulse-action@main
        with:
          account: 962416
          repository: 127765544
          path: report/*.xml
          key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
          secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}
