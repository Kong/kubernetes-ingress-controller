name: nightly

on:
  schedule:
    - cron: '30 3 * * *'
  workflow_dispatch: {}

env:
  RH_SCAN_REGISTRY: quay.io
  RH_SCAN_REGISTRY_IMAGE_NAME: redhat-isv-containers/5eab1b8ea165648bd1353266

jobs:
  build-push-images:
    environment: 'Docker Push'
    runs-on: ubuntu-latest
    outputs:
      TAGS_REDHAT_STANDARD: ${{ steps.tags-redhat-standard.outputs.TAGS_REDHAT_STANDARD }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Add standard tags
        id: tags-standard
        run: |
          echo 'TAGS_STANDARD<<EOF' >> $GITHUB_OUTPUT
          echo 'type=raw,value=nightly' >> $GITHUB_OUTPUT
          echo "type=raw,value={{date 'YYYY-MM-DD'}}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Add Red Hat standard tags
        id: tags-redhat-standard
        run: |
          echo 'TAGS_REDHAT_STANDARD<<EOF' >> $GITHUB_OUTPUT
          echo 'type=raw,value=nightly,suffix=-redhat' >> $GITHUB_OUTPUT
          echo "type=raw,value={{date 'YYYY-MM-DD'}},suffix=-redhat" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: kong/nightly-ingress-controller
          tags: ${{ steps.tags-standard.outputs.TAGS_STANDARD }}
      - name: Docker meta (redhat)
        id: meta_redhat
        uses: docker/metadata-action@v4.1.1
        with:
          images: kong/nightly-ingress-controller
          flavor: |
            latest=false
          tags: ${{ steps.tags-redhat-standard.outputs.TAGS_REDHAT_STANDARD }}
      - name: Build binary
        id: docker_build_binary
        uses: docker/build-push-action@v3
        with:
          push: false
          file: Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: builder
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git
      - name: Build and push distroless image to DockerHub
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: distroless
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git
      - name: Build and push Red Hat image to DockerHub
        id: docker_build_redhat
        env:
          TAG: ${{ steps.meta.outputs.version }}
        uses: docker/build-push-action@v3
        with:
          push: true
          file: Dockerfile
          tags: ${{ steps.meta_redhat.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: redhat
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git

  redhat-certification-test:
    environment: 'Docker Push'
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: 
      - build-push-images
    env:
      REDHAT_STANDARD_TAG: ${{ needs.build-push-images.outputs.REDHAT_STANDARD_TAG }}

    steps:
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to RH Scan Registry
        continue-on-error: true
        uses: docker/login-action@v2
        with:
          registry: ${{ env.RH_SCAN_REGISTRY }}
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_TOKEN }}
      - name: Docker meta (redhat scan registry)
        id: meta_redhat_scan_registry
        uses: docker/metadata-action@v4.1.1
        with:
          images: ${{ env.RH_SCAN_REGISTRY }}/${{ env.RH_SCAN_REGISTRY_IMAGE_NAME }}
          flavor: |
            latest=false
          tags: ${{ env.REDHAT_STANDARD_TAG }}
      - name: Build image for local Preflight scan
        id: docker_build_redhat_scan_registry
        env:
          TAG: ${{ steps.meta_redhat_scan_registry.outputs.version }}
        uses: docker/build-push-action@v3.1.1
        with:
          push: false
          file: Dockerfile
          tags: ${{ steps.meta_redhat_scan_registry.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: redhat
          # RedHat scan registry does not support multiarch images
          platforms: linux/amd64
          build-args: |
            TAG=${{ steps.meta_redhat_scan_registry.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git
      - name: Run local Red Hat Certification Preflight scan
        uses: ./.github/actions/redhat-opdev-preflight-action
        with:
          image: ${{ env.RH_SCAN_REGISTRY }}/${{ env.RH_SCAN_REGISTRY_IMAGE_NAME }}:${{ steps.meta_redhat_scan_registry.outputs.version }}
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_TOKEN }}
          submit: false
  
  # run integration test in latest version of kubernetes.
  test-current-kubernetes:
    runs-on: ubuntu-latest
    needs: build-push-images
    name: Run integration tests in KinD
    strategy:
      matrix:
        kubernetes-version:
          - 'v1.25.0'
        dbmode:
          - 'dbless'
          - 'postgres'
        kong-router-flavor:
          - 'traditional'
          - 'traditional_compatible'
    steps:
      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19'
      - name: cache go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-codegen-
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Kubernetes ${{ matrix.kubernetes-version }} ${{ matrix.dbmode }} Integration Tests With ${{ matrix.kong-router-flavor }} Kong Router
        run: KONG_CLUSTER_VERSION=${{ matrix.kubernetes-version }} make test.integration.${{ matrix.dbmode }}
        env:
          GOTESTSUM_JUNITFILE: integration-${{ matrix.kong-router-flavor }}-${{ matrix.kubernetes-version }}-${{ matrix.dbmode }}-tests.xml
          TEST_KONG_ROUTER_FLAVOR: ${{ matrix.kong-router-flavor }}
      - name: Kubernetes ${{ matrix.kubernetes-version }} ${{ matrix.dbmode }} Integration Tests for Invalid Configurations With ${{ matrix.kong-router-flavor }} Kong Router
        run: KONG_CLUSTER_VERSION=${{ matrix.kubernetes-version }} make test.integration.${{ matrix.dbmode }}
        env:
          GOTESTSUM_JUNITFILE: integration-invalid-config-${{ matrix.kong-router-flavor }}-${{ matrix.kubernetes-version }}-${{ matrix.dbmode }}-tests.xml
          TEST_KONG_ROUTER_FLAVOR: ${{ matrix.kong-router-flavor }}
          GOTESTFLAGS: "-run=TestIngressRecoverFromInvalidPath"
          TEST_RUN_INVALID_CONFIG_CASES: "true"
      - name: collect test report
        uses: actions/upload-artifact@v3
        with:
          name: tests-report
          path: integration-${{ matrix.kubernetes-version }}-${{ matrix.dbmode }}-${{ matrix.kong-router-flavor }}-tests.xml

  buildpulse-report:
    environment: "Configure ci"
    needs:
      - "test-current-kubernetes"
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: download tests report
        id: download-coverage
        uses: actions/download-artifact@v3
        with:
          name: tests-report
          path: report

      - name: Upload test results to BuildPulse for flaky test detection
        if: ${{ !cancelled() }}
        uses: Workshop64/buildpulse-action@main
        with:
          account: 962416
          repository: 127765544
          path: report/*.xml
          key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
          secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}
