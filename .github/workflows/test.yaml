name: tests

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - 'main'
    tags:
      - '*'
  workflow_dispatch: {}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:

    - name: Setup go
      uses: actions/setup-go@bfdd3570ce990073878bf10f6b2d79082de49492 # v2
      with:
        go-version: '^1.17'

    - name: Cache Go modules
      uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed # v2.1.7
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: Checkout repository
      uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2
      with:
        fetch-depth: 0

    - name: Setup yq
      run: go install github.com/mikefarah/yq/v4@latest

    - name: Setup golangci-lint
      run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.42.1

    - name: Run golangci-lint
      run: make lint

    - name: Verify manifest consistency
      run: make verify.manifests

    - name: Verify generators consistency
      run: make verify.generators

  image-tests:
    runs-on: ubuntu-latest
    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f211e3e9ded2d9377c8cadc4489a4e38014bc4c9 # v1

      - name: checkout repository
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2
        with:
          fetch-depth: 0

      - name: Cache Docker layers
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed # v2.1.7
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Verify Docker Build
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a # v2
        with:
          push: false
          file: Dockerfile
          tags: latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  unit-tests:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@bfdd3570ce990073878bf10f6b2d79082de49492 # v2
      with:
        go-version: '^1.17'

    - name: cache go modules
      uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed # v2.1.7
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2
      with:
        fetch-depth: 0

    - name: run unit tests
      run: make test.unit

    - name: collect test coverage
      uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1
      with:
        name: coverage.unit.out
        path: coverage.unit.out

  integration-tests-enterprise-postgres:
    environment: "Configure ci"
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@bfdd3570ce990073878bf10f6b2d79082de49492 # v2
      with:
        go-version: '^1.17'

    - name: cache go modules
      uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed # v2.1.7
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2
      with:
        fetch-depth: 0

    - name: run integration tests
      run: make test.integration.enterprise.postgres
      env:
        KONG_LICENSE_DATA: ${{ secrets.KONG_LICENSE_DATA }}

    - name: collect test coverage
      uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1
      with:
        name: coverage.enterprisepostgres.out
        path: coverage.enterprisepostgres.out

  integration-tests-dbless:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@bfdd3570ce990073878bf10f6b2d79082de49492 # v2
      with:
        go-version: '^1.17'

    - name: cache go modules
      uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed # v2.1.7
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2
      with:
        fetch-depth: 0

    - name: run integration tests
      run: make test.integration.dbless

    - name: collect test coverage
      uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1
      with:
        name: coverage.dbless.out
        path: coverage.dbless.out

  integration-tests-postgres:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@bfdd3570ce990073878bf10f6b2d79082de49492 # v2
      with:
        go-version: '^1.17'

    - name: cache go modules
      uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed # v2.1.7
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2
      with:
        fetch-depth: 0

    - name: run integration tests
      run: make test.integration.postgres

    - name: collect test coverage
      uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2 # v2.3.1
      with:
        name: coverage.postgres.out
        path: coverage.postgres.out

  coverage:
    environment: "Configure ci"
    needs:
      - "unit-tests"
      - "integration-tests-dbless"
      - "integration-tests-postgres"
      - "integration-tests-enterprise-postgres"
    runs-on: ubuntu-latest
    steps:
      # TODO: deduplicate the download-artifact steps by implementing a `matrix` workflow step instead
    - name: collect unit test coverage artifacts
      id: download-unit
      uses: actions/download-artifact@f023be2c48cc18debc3bacd34cb396e0295e2869 # v2.1.0
      with:
        name: coverage.unit.out
        path: coverage.unit.out

    - name: collect dbless test coverage artifacts
      id: download-dbless
      uses: actions/download-artifact@f023be2c48cc18debc3bacd34cb396e0295e2869 # v2.1.0
      with:
        name: coverage.dbless.out
        path: coverage.dbless.out

    - name: collect postgres test coverage artifacts
      id: download-postgres
      uses: actions/download-artifact@f023be2c48cc18debc3bacd34cb396e0295e2869 # v2.1.0
      with:
        name: coverage.postgres.out
        path: coverage.postgres.out

    - name: collect enterprisepostgres test coverage artifacts
      id: download-enterprisepostgres
      uses: actions/download-artifact@f023be2c48cc18debc3bacd34cb396e0295e2869 # v2.1.0
      with:
        name: coverage.enterprisepostgres.out
        path: coverage.enterprisepostgres.out

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@f32b3a3741e1053eb607407145bc9619351dc93b # v2.1.0
      with:
        name: combined-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ${{steps.download-unit.outputs.download-path}}/coverage.unit.out,${{steps.download-dbless.outputs.download-path}}/coverage.dbless.out,${{steps.download-postgres.outputs.download-path}}/coverage.postgres.out,
               ${{steps.download-enterprisepostgres.outputs.download-path}}/coverage.enterprisepostgres.out
        fail_ci_if_error: true
        verbose: true
