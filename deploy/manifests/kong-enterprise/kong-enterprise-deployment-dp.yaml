---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ingress-kong-dp
  name: ingress-kong-dp
  namespace: kong
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-kong-dp
  template:
    metadata:
      annotations:
        kuma.io/gateway: enabled
        prometheus.io/port: "8100"
        prometheus.io/scrape: "true"
        traffic.sidecar.istio.io/includeInboundPorts: ""
      labels:
        app: ingress-kong-dp
    spec:
      imagePullSecrets:
        - name: kong-enterprise-edition-docker
      initContainers:
        - command:
            - /bin/sh
            - -c
            - while true; do kong migrations list; if [[ 0 -eq $? ]]; then exit 0; fi;
              sleep 2;  done;
          env:
            - name: KONG_LICENSE_DATA
              valueFrom:
                secretKeyRef:
                  key: license
                  name: kong-enterprise-license
          envFrom:
            - secretRef:
                name: kong-settings
            - secretRef:
                name: kong-settings-cp
          image: kong
          name: wait-for-migrations
      serviceAccountName: kong-serviceaccount
      containers:
        - envFrom:
            - secretRef:
                name: kong-settings
            - secretRef:
                name: kong-settings-dp
          env:
            - name: KONG_LICENSE_DATA
              valueFrom:
                secretKeyRef:
                  key: license
                  name: kong-enterprise-license
          image: kong
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - kong quit
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 8100
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: proxy
          ports:
            - containerPort: 8000
              name: proxy
              protocol: TCP
            - containerPort: 8443
              name: proxy-ssl
              protocol: TCP
            - containerPort: 8100
              name: metrics
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: 8100
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          securityContext:
            runAsUser: 1000
