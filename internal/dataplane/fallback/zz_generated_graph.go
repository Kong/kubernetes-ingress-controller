// Code generated by hack/generators/config-graph; DO NOT EDIT.
package fallback

import (
	"errors"
	"fmt"

	"github.com/dominikbraun/graph"
	"github.com/kong/kubernetes-ingress-controller/v3/internal/store"
	"k8s.io/client-go/tools/cache"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

func NewConfigGraphFromCacheStores(c store.CacheStores) (*ConfigGraph, error) {
	g := graph.New[ObjectHash, client.Object](GetObjectHash, graph.Directed())

	// Gather cache store fields for all kinds.
	allStores := []cache.Store{
		c.IngressV1,
		c.IngressClassV1,
		c.Service,
		c.Secret,
		c.EndpointSlice,
		c.HTTPRoute,
		c.UDPRoute,
		c.TCPRoute,
		c.TLSRoute,
		c.GRPCRoute,
		c.ReferenceGrant,
		c.Gateway,
		c.Plugin,
		c.ClusterPlugin,
		c.Consumer,
		c.ConsumerGroup,
		c.KongIngress,
		c.TCPIngress,
		c.UDPIngress,
		c.KongUpstreamPolicy,
		c.IngressClassParametersV1alpha1,
		c.KongServiceFacade,
		c.KongVault,
	}

	for _, s := range allStores {
		for _, o := range s.List() {
			obj, err := o.(client.Object)
			if !err {
				// Should not happen since all objects in the cache are client.Objects, but better safe than sorry.
				return nil, fmt.Errorf("expected client.Object, got %T", o)
			}
			// Add the object to the graph. It can happen that the object is already in the graph (i.e. was already added
			// as a dependency of another object), in which case we ignore the error.
			if err := g.AddVertex(obj); err != nil && !errors.Is(err, graph.ErrVertexAlreadyExists) {
				return nil, fmt.Errorf("failed to add %s to the graph: %w", GetObjectHash(obj), err)
			}

			// Add the object's dependencies to the graph.
			for _, dep := range ResolveDependencies(c, obj) {
				// Add the dependency to the graph in case it wasn't added before. If it was added before, we ignore the
				// error.
				if err := g.AddVertex(dep); err != nil && !errors.Is(err, graph.ErrVertexAlreadyExists) {
					return nil, fmt.Errorf("failed to add %s to the graph: %w", GetObjectHash(obj), err)
				}

				// Add an edge from a dependency to the object. If the edge was already added before, we ignore the error.
				if err := g.AddEdge(GetObjectHash(dep), GetObjectHash(obj)); err != nil && !errors.Is(err, graph.ErrEdgeAlreadyExists) {
					return nil, fmt.Errorf("failed to add edge from %s to %s: %w", GetObjectHash(obj), GetObjectHash(dep), err)
				}
			}
		}
	}

	return &ConfigGraph{graph: g}, nil
}
