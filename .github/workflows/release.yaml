name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: |
          The version to release.
          Depending on the value, a production release will be published to GitHub or not.
            - In case of prerelease tags (e.g. v1.2.3-alpha.1) it will build-push the images (only standard tags,
              i.e., v1.2.3-alpha.1 and v1.2.3-alpha.1-redhat), test them and publish a GitHub prerelease (labeled as non-production ready).
            - In other cases (e.g. v1.2.3) it will build-push the images (standard and supplemental tags, 
              i.e., v1.2.3, v1.2.3-redhat, v1.2 and v1.2-redhat), test them and publish a production Github release.
        required: true
      latest:
        description: 'Whether to tag this release latest'
        required: true
        default: 'false'
env:
  RH_SCAN_REGISTRY: quay.io
  RH_SCAN_REGISTRY_IMAGE_NAME: redhat-isv-containers/5eab1b8ea165648bd1353266

jobs:
  verify-manifest-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: mukunku/tag-exists-action@9298fbcc409758ba624a0ae16b83df86637cb8ce # v1.2.0
        id: check-tag
        name: check if tag already exists
        with:
          tag: ${{ github.event.inputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: fail if tag already exists
        if: ${{ steps.check-tag.outputs.exists == 'true' }}
        run: exit 1
      - name: checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          fetch-depth: 0
      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@e81ad80123156d7ddd4f6c8383e63f497f857deb # v1.4.6
        with:
          input_string: ${{ github.event.inputs.tag }}
          version_extractor_regex: 'v(.*)$'
      - name: Verify manifests have requested KIC tag
        env:
          TAG: ${{ steps.semver_parser.outputs.fullversion }}
        run: make verify.versions

  build-push-images:
    environment: 'Docker Push'
    needs: verify-manifest-tag
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          fetch-depth: 0
      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@3576f3a20a39f8752fe0d8195f5ed384090285dc # v1
        with:
          input_string: ${{ github.event.inputs.tag }}
          version_extractor_regex: 'v(.*)$'
      - name: Add standard tags
        run: |
          echo 'TAGS_STANDARD<<EOF' >> $GITHUB_ENV
          echo 'type=raw,value=${{ steps.semver_parser.outputs.fullversion }}' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Add major.minor tag
        if: ${{ steps.semver_parser.outputs.prerelease == '' }}
        run: |
          echo 'TAGS_SUPPLEMENTAL<<EOF' >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo 'type=raw,value=${{ steps.semver_parser.outputs.major }}.${{ steps.semver_parser.outputs.minor }}' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Add Red Hat standard tags
        run: |
          echo 'REDHAT_STANDARD<<EOF' >> $GITHUB_ENV
          echo 'type=raw,value=${{ steps.semver_parser.outputs.fullversion }},suffix=-redhat' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Add Red Hat major.minor tag
        if: ${{ steps.semver_parser.outputs.prerelease == '' }}
        run: |
          echo 'REDHAT_SUPPLEMENTAL<<EOF' >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo 'type=raw,value=${{ steps.semver_parser.outputs.major }}.${{ steps.semver_parser.outputs.minor }},suffix=-redhat' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2
      - name: Cache Docker layers
        uses: actions/cache@f4b3439a656ba812b8cb417d2d49f9c810103092 # v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to RH Scan Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          registry: ${{ env.RH_SCAN_REGISTRY }}
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea # v4.1.1
        with:
          images: kong/kubernetes-ingress-controller
          flavor: |
            latest=${{ github.event.inputs.latest == 'true' }}
          tags: ${{ env.TAGS_STANDARD }}${{ env.TAGS_SUPPLEMENTAL }}
      - name: Docker meta (redhat)
        id: meta_redhat
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea # v4.1.1
        with:
          images: kong/kubernetes-ingress-controller
          flavor: |
            latest=${{ github.event.inputs.latest == 'true' }}
          tags: ${{ env.REDHAT_STANDARD }}${{ env.REDHAT_SUPPLEMENTAL }}
      - name: Docker meta (redhat scan registry)
        id: meta_redhat_scan_registry
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea # v4.1.1
        with:
          images: ${{ env.RH_SCAN_REGISTRY }}/${{ env.RH_SCAN_REGISTRY_IMAGE_NAME }}
          flavor: |
            latest=${{ github.event.inputs.latest == 'true' }}
          tags: ${{ env.REDHAT_STANDARD }}${{ env.REDHAT_SUPPLEMENTAL }}
      - name: Build binary
        id: docker_build_binary
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3
        with:
          push: false
          file: Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: builder
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git
      - name: Build and push distroless image to DockerHub
        id: docker_build
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3
        with:
          push: true
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: distroless
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git
      - name: Build and push Red Hat image to DockerHub
        id: docker_build_redhat
        env:
          TAG: ${{ steps.meta_redhat.outputs.version }}
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3
        with:
          push: true
          file: Dockerfile
          tags: ${{ steps.meta_redhat.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: redhat
          platforms: linux/amd64, linux/arm64
          build-args: |
            TAG=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git
      - name: Build and push Red Hat image to Red Hat Scan Registry
        id: docker_build_redhat_scan_registry
        env:
          TAG: ${{ steps.meta_redhat_scan_registry.outputs.version }}
        uses: docker/build-push-action@c84f38281176d4c9cdb1626ffafcd6b3911b5d94 # v3.1.1
        with:
          push: true
          file: Dockerfile
          tags: ${{ steps.meta_redhat_scan_registry.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          target: redhat
          # RedHat scan registry does not support multiarch images
          platforms: linux/amd64
          build-args: |
            TAG=${{ steps.meta_redhat_scan_registry.outputs.version }}
            COMMIT=${{ github.sha }}
            REPO_INFO=https://github.com/${{ github.repository }}.git
      - name: Run Red Hat Certification Preflight scan
        uses: ./.github/actions/redhat-opdev-preflight-action
        with:
          image: ${{ env.RH_SCAN_REGISTRY }}/${{ env.RH_SCAN_REGISTRY_IMAGE_NAME }}:${{ steps.meta_redhat_scan_registry.outputs.version }}
          username: ${{ secrets.RH_USERNAME }}
          password: ${{ secrets.RH_TOKEN }}
          submit: true
          apitoken: ${{ secrets.RH_PYXIS_TOKEN }}
          certificationid: ${{ secrets.RH_CERTIFICATION_ID }}

  test-current-kubernetes:
    runs-on: ubuntu-latest
    needs: build-push-images
    steps:
      - name: setup golang
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
        with:
          go-version: '^1.19'
      - name: cache go modules
        uses: actions/cache@f4b3439a656ba812b8cb417d2d49f9c810103092 # v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-codegen-
      - name: checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          fetch-depth: 0
      - uses: Kong/kong-license@c4decf08584f84ff8fe8e7cd3c463e0192f6111b # master
        id: license
        with:
          password: ${{ secrets.PULP_PASSWORD }}
      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@3576f3a20a39f8752fe0d8195f5ed384090285dc # v1
        with:
          input_string: ${{ github.event.inputs.tag }}
          version_extractor_regex: 'v(.*)$'
      - name: e2e current kubernetes
        run: make test.e2e
        env:
          TEST_KONG_CONTROLLER_IMAGE_OVERRIDE: "kong/kubernetes-ingress-controller:${{ steps.semver_parser.outputs.fullversion }}"
          KONG_LICENSE_DATA: ${{ steps.license.outputs.license }}
          KONG_CLUSTER_VERSION: 'v1.26.0'
          NCPU: 1 # it was found that github actions (specifically) did not seem to perform well when spawning
          # multiple kind clusters within a single job, so only 1 is allowed at a time.

  test-previous-kubernetes:
    environment: gcloud
    runs-on: ubuntu-latest
    needs: build-push-images
    strategy:
      fail-fast: true
      matrix:
        kubernetes-version:
          - 'v1.21.12'
          - 'v1.22.9'
          - 'v1.23.6'
          - 'v1.24.2'
          - 'v1.25.3'
    steps:
      - name: setup golang
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
        with:
          go-version: '^1.19'
      - name: cache go modules
        uses: actions/cache@f4b3439a656ba812b8cb417d2d49f9c810103092 # v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-codegen-
      - name: checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          fetch-depth: 0
      - uses: Kong/kong-license@c4decf08584f84ff8fe8e7cd3c463e0192f6111b # master
        id: license
        with:
          password: ${{ secrets.PULP_PASSWORD }}
      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@3576f3a20a39f8752fe0d8195f5ed384090285dc # v1
        with:
          input_string: ${{ github.event.inputs.tag }}
          version_extractor_regex: 'v(.*)$'
      - name: e2e ${{ matrix.kubernetes-version }}
        run: make test.e2e.gke
        env:
          TEST_KONG_CONTROLLER_IMAGE_OVERRIDE: "kong/kubernetes-ingress-controller:${{ steps.semver_parser.outputs.fullversion }}"
          KONG_LICENSE_DATA: ${{ steps.license.outputs.license }}
          KONG_CLUSTER_VERSION: ${{ matrix.kubernetes-version }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
          GOOGLE_LOCATION: ${{ secrets.GOOGLE_LOCATION }}

  publish-release:
    runs-on: ubuntu-latest
    needs: [build-push-images, test-current-kubernetes, test-previous-kubernetes]
    steps:
    - name: Parse semver string
      id: semver_parser
      uses: booxmedialtd/ws-action-parse-semver@3576f3a20a39f8752fe0d8195f5ed384090285dc # v1
      with:
        input_string: ${{ github.event.inputs.tag }}
        version_extractor_regex: 'v(.*)$'
    - uses: ncipollo/release-action@cdcc88a9acf3ca41c16c37bb7d21b9ad48560d87 # v1
      with:
        body: |
          #### Download Kong Ingress Controller ${{ steps.semver_parser.outputs.fullversion }}:

          - [Docker Image](https://hub.docker.com/repository/docker/kong/kubernetes-ingress-controller)
          - [Get started](https://github.com/Kong/kubernetes-ingress-controller#get-started)
          
          #### Links:
          
          - [Changelog](https://github.com/Kong/kubernetes-ingress-controller/blob/main/CHANGELOG.md#${{ steps.semver_parser.outputs.major }}${{ steps.semver_parser.outputs.minor }}${{ steps.semver_parser.outputs.patch }})

        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.event.inputs.tag }}
        commit: ${{ github.sha }}
        # When prerelease part of the input tag is not empty, make it a prerelease.
        # The release will be labeled as non-production ready in GitHub.
        prerelease: ${{ steps.semver_parser.outputs.prerelease != '' }}
