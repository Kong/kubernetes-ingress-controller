name: tests

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - 'main'
    tags:
      - '*'
  workflow_dispatch: {}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:

    - name: Setup go
      uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
      with:
        go-version: '^1.19'

    - name: Cache Go modules
      uses: actions/cache@f4b3439a656ba812b8cb417d2d49f9c810103092 # v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: Checkout repository
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        fetch-depth: 0

    - name: Setup yq
      run: go install github.com/mikefarah/yq/v4@latest

    - name: Run lint
      run: make lint

    - name: Verify manifest consistency
      run: make verify.manifests

    - name: Verify generators consistency
      run: make verify.generators

  image-tests:
    runs-on: ubuntu-latest
    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2

      - name: checkout repository
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          fetch-depth: 0

      - name: Cache Docker layers
        uses: actions/cache@f4b3439a656ba812b8cb417d2d49f9c810103092 # v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Verify Docker Build
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3
        with:
          push: false
          file: Dockerfile
          tags: latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  unit-tests:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@f4b3439a656ba812b8cb417d2d49f9c810103092 # v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        fetch-depth: 0

    - name: run unit tests
      run: make test.unit

    - name: collect test coverage
      uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3
      with:
        name: coverage
        path: coverage.unit.out

  integration-tests-enterprise-postgres:
    environment: "Configure ci"
    runs-on: ubuntu-latest
    steps:

    - uses: Kong/kong-license@c4decf08584f84ff8fe8e7cd3c463e0192f6111b # master
      id: license
      with:
        # PULP_PASSWORD secret is set in "Configure ci" environment
        password: ${{ secrets.PULP_PASSWORD }}

    - name: setup golang
      uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@f4b3439a656ba812b8cb417d2d49f9c810103092 # v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        fetch-depth: 0

    - name: run integration tests
      run: make test.integration.enterprise.postgres
      env:
        KONG_LICENSE_DATA: ${{ steps.license.outputs.license }}

    - name: collect test coverage
      uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3
      with:
        name: coverage
        path: coverage.enterprisepostgres.out

    - name: upload diagnostics
      if: ${{ always() }}
      uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3
      with:
        name: diagnostics-integration-tests-enterprise-postgres
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

  integration-tests-dbless:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@f4b3439a656ba812b8cb417d2d49f9c810103092 # v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        fetch-depth: 0

    - name: run integration tests
      run: make test.integration.dbless

    - name: collect test coverage
      uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3
      with:
        name: coverage
        path: coverage.dbless.out

    - name: upload diagnostics
      if: ${{ always() }}
      uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3
      with:
        name: diagnostics-integration-tests-dbless
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

  integration-tests-postgres:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@f4b3439a656ba812b8cb417d2d49f9c810103092 # v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        fetch-depth: 0

    - name: run integration tests
      run: make test.integration.postgres

    - name: collect test coverage
      uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3
      with:
        name: coverage
        path: coverage.postgres.out

    - name: upload diagnostics
      if: ${{ always() }}
      uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3
      with:
        name: diagnostics-integration-tests-postgres
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

  integration-tests-feature-gates:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@f4b3439a656ba812b8cb417d2d49f9c810103092 # v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        fetch-depth: 0

    - name: run integration tests
      run: make test.integration.dbless
      env:
        KONG_CONTROLLER_FEATURE_GATES: "GatewayAlpha=true,CombinedRoutes=true"

    - name: collect test coverage
      uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3
      with:
        name: coverage
        path: coverage.featuregates.out

    - name: upload diagnostics
      if: ${{ always() }}
      uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3
      with:
        name: diagnostics-integration-tests-feature-gates
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

  conformance-tests:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@f4b3439a656ba812b8cb417d2d49f9c810103092 # v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        fetch-depth: 0

    - name: run conformance tests
      run: make test.conformance

  coverage:
    environment: "Configure ci"
    needs:
      - "unit-tests"
      - "integration-tests-dbless"
      - "integration-tests-postgres"
      - "integration-tests-enterprise-postgres"
      - "integration-tests-feature-gates"
    runs-on: ubuntu-latest
    steps:

    - name: collect test coverage artifacts
      id: download-coverage
      uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
      with:
        name: coverage
        path: coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@ab904c41d6ece82784817410c45d8b8c02684457 # v3
      with:
        name: combined-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ${{steps.download-coverage.outputs.download-path}}
        fail_ci_if_error: true
        verbose: true
