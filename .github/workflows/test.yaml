name: tests

concurrency:
  # Run only for most recent commit in PRs but for all tags and commits on main
  # Ref: https://docs.github.com/en/actions/using-jobs/using-concurrency
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - 'main'
    tags:
      - '*'
  workflow_dispatch: {}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version: '^1.20'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: Run lint
      run: make lint

    - name: Verify manifest consistency
      run: make verify.manifests

    - name: Verify generators consistency
      run: make verify.generators

  image-tests:
    runs-on: ubuntu-latest
    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Verify Docker Build
        uses: docker/build-push-action@v4
        with:
          push: false
          file: Dockerfile
          tags: latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.20'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: run unit tests
      run: make test.unit
      env:
        GOTESTSUM_JUNITFILE: "unit-tests.xml"

    - name: collect test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage.unit.out

    - name: collect test report
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: unit-tests.xml

  integration-tests:
    name: integration-tests-${{ matrix.name }}
    runs-on: ubuntu-latest
    env:
      PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
    # We don't want to run enterprise tests for contributors whose workflow runs
    # do not have access to enterprise license (here, through the means of
    # kong-license action) so don't run this job when the required secret is not
    # available.
    # Instead of making it conditional on job level we need to job.env because
    # secrets context is only available at this level.
    #
    # ref: https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
    strategy:
      fail-fast: false
      matrix:
        include:
        - name: dbless
          test: dbless
        - name: postgres
          test: postgres
        - name: feature-gates
          test: dbless
          feature_gates: "GatewayAlpha=true,CombinedRoutes=false"
        - name: dbless-knative
          test: dbless.knative
        - name: postgres-knative
          test: postgres.knative
        - name: enterprise-postgres
          test: enterprise.postgres
          enterprise: true

    steps:

    - uses: Kong/kong-license@master
      if: env.PULP_PASSWORD != '' && matrix.enterprise
      id: license
      with:
        password: ${{ env.PULP_PASSWORD }}

    - name: Detect if we should run if we're running enterprise tests but no license is available
      id: detect_if_should_run
      run: echo "result=${{ (steps.license.outputs.license != '' && matrix.enterprise) || (!matrix.enterprise) }}" >> $GITHUB_OUTPUT

    - name: Set image and tag for enterprise
      if: steps.detect_if_should_run.outputs.result && matrix.enterprise
      # TODO: We need a systematic approach to this. Either:
      # - leave this here and bump every GW release
      # - remove this and rely on bumping GW image in ktf
      # - rely on a mechanism in ktf that will always, by default return the newest
      #   Gateway tag.
      # Related issue: https://github.com/Kong/kubernetes-testing-framework/issues/542
      run: |
        echo "TEST_KONG_IMAGE=kong/kong-gateway" >> $GITHUB_ENV
        echo "TEST_KONG_TAG=3.1.1.3-alpine" >> $GITHUB_ENV

    - name: checkout repository
      if: steps.detect_if_should_run.outputs.result
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: setup golang
      if: steps.detect_if_should_run.outputs.result
      uses: actions/setup-go@v3
      with:
        go-version: '^1.20'

    - name: cache go modules
      if: steps.detect_if_should_run.outputs.result
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: run make test.integration.${{ matrix.test }}
      if: steps.detect_if_should_run.outputs.result
      run: make test.integration.${{ matrix.test }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        KONG_LICENSE_DATA: ${{ steps.license.outputs.license }}
        KONG_CONTROLLER_FEATURE_GATES: "${{ matrix.feature_gates }}"
        GOTESTSUM_JUNITFILE: "integration-tests-${{ matrix.name }}.xml"

    - name: collect test coverage
      if: steps.detect_if_should_run.outputs.result
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage.*.out

    - name: upload diagnostics
      if: ${{ !cancelled() && steps.detect_if_should_run.outputs.result }}
      uses: actions/upload-artifact@v3
      with:
        name: diagnostics-integration-tests-${{ matrix.name }}
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

    - name: collect test report
      if: ${{ !cancelled() && steps.detect_if_should_run.outputs.result }}
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: integration-tests-${{ matrix.name }}.xml

  conformance-tests:
    runs-on: ubuntu-latest
    steps:

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.20'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: run conformance tests
      run: make test.conformance
      env:
        GOTESTSUM_JUNITFILE: "conformance-tests.xml"

    - name: collect test report
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: conformance-tests.xml

  test-passed:
    runs-on: ubuntu-latest
    needs:
      - "unit-tests"
      - "integration-tests"
      - "conformance-tests"
    if: always()
    steps:
    - name: Set workflow outcome based on unit-tests
      if: needs.unit-tests.result == 'failure' || needs.unit-tests.result == 'cancelled'
      run: ${{ false }}
    - name: Set workflow outcome based on integration-tests
      if: needs.integration-tests.result == 'failure' || needs.integration-tests.result == 'cancelled'
      run: ${{ false }}
    - name: Set workflow outcome based on conformance-tests
      if: needs.conformance-tests.result == 'failure' || needs.conformance-tests.result == 'cancelled'
      run: ${{ false }}

  coverage:
    needs:
      - "unit-tests"
      - "integration-tests"
    runs-on: ubuntu-latest
    steps:

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: collect test coverage artifacts
      id: download-coverage
      uses: actions/download-artifact@v3
      with:
        name: coverage
        path: coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        name: combined-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ${{steps.download-coverage.outputs.download-path}}
        fail_ci_if_error: true
        verbose: true

  buildpulse-report:
    needs:
      - "unit-tests"
      - "integration-tests"
      - "conformance-tests"
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    steps:

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: download tests report
        id: download-coverage
        uses: actions/download-artifact@v3
        with:
          name: tests-report
          path: report

      - name: Upload test results to BuildPulse for flaky test detection
        uses: Workshop64/buildpulse-action@main
        with:
          account: 962416
          repository: 127765544
          path: report/*.xml
          key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
          secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}
