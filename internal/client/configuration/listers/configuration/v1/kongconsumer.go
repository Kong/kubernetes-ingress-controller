/*
Copyright 2018 The Kong Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kong/kubernetes-ingress-controller/internal/apis/configuration/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KongConsumerLister helps list KongConsumers.
type KongConsumerLister interface {
	// List lists all KongConsumers in the indexer.
	List(selector labels.Selector) (ret []*v1.KongConsumer, err error)
	// KongConsumers returns an object that can list and get KongConsumers.
	KongConsumers(namespace string) KongConsumerNamespaceLister
	KongConsumerListerExpansion
}

// kongConsumerLister implements the KongConsumerLister interface.
type kongConsumerLister struct {
	indexer cache.Indexer
}

// NewKongConsumerLister returns a new KongConsumerLister.
func NewKongConsumerLister(indexer cache.Indexer) KongConsumerLister {
	return &kongConsumerLister{indexer: indexer}
}

// List lists all KongConsumers in the indexer.
func (s *kongConsumerLister) List(selector labels.Selector) (ret []*v1.KongConsumer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KongConsumer))
	})
	return ret, err
}

// KongConsumers returns an object that can list and get KongConsumers.
func (s *kongConsumerLister) KongConsumers(namespace string) KongConsumerNamespaceLister {
	return kongConsumerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KongConsumerNamespaceLister helps list and get KongConsumers.
type KongConsumerNamespaceLister interface {
	// List lists all KongConsumers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.KongConsumer, err error)
	// Get retrieves the KongConsumer from the indexer for a given namespace and name.
	Get(name string) (*v1.KongConsumer, error)
	KongConsumerNamespaceListerExpansion
}

// kongConsumerNamespaceLister implements the KongConsumerNamespaceLister
// interface.
type kongConsumerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KongConsumers in the indexer for a given namespace.
func (s kongConsumerNamespaceLister) List(selector labels.Selector) (ret []*v1.KongConsumer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KongConsumer))
	})
	return ret, err
}

// Get retrieves the KongConsumer from the indexer for a given namespace and name.
func (s kongConsumerNamespaceLister) Get(name string) (*v1.KongConsumer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kongconsumer"), name)
	}
	return obj.(*v1.KongConsumer), nil
}
