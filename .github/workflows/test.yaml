name: tests

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - 'main'
    tags:
      - '*'
  workflow_dispatch: {}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:

    - name: Setup go
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup yq
      run: go install github.com/mikefarah/yq/v4@latest

    - name: Run lint
      run: make lint

    - name: Verify manifest consistency
      run: make verify.manifests

    - name: Verify generators consistency
      run: make verify.generators

  image-tests:
    runs-on: ubuntu-latest
    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Verify Docker Build
        uses: docker/build-push-action@v3
        with:
          push: false
          file: Dockerfile
          tags: latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  unit-tests:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: run unit tests
      run: make test.unit
      env:
        GOTESTSUM_JUNITFILE: "unit-tests.xml"

    - name: collect test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage.unit.out

    - name: collect test report
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: unit-tests.xml

  integration-tests-enterprise-postgres:
    environment: "Configure ci"
    runs-on: ubuntu-latest
    steps:

    - uses: Kong/kong-license@master
      id: license
      with:
        # PULP_PASSWORD secret is set in "Configure ci" environment
        password: ${{ secrets.PULP_PASSWORD }}

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: run integration tests
      run: make test.integration.enterprise.postgres
      env:
        KONG_LICENSE_DATA: ${{ steps.license.outputs.license }}
        GOTESTSUM_JUNITFILE: "integration-tests-enterprise-postgres.xml"

    - name: collect test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage.enterprisepostgres.out

    - name: upload diagnostics
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: diagnostics-integration-tests-enterprise-postgres
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

    - name: collect test report
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: integration-tests-enterprise-postgres.xml

  integration-tests-dbless:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: run integration tests
      run: make test.integration.dbless
      env:
        GOTESTSUM_JUNITFILE: "integration-tests-dbless.xml"

    - name: collect test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage.dbless.out

    - name: upload diagnostics
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: diagnostics-integration-tests-dbless
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

    - name: collect test report
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: integration-tests-dbless.xml

  integration-tests-postgres:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: run integration tests
      run: make test.integration.postgres
      env:
        GOTESTSUM_JUNITFILE: "integration-tests-postgres.xml"

    - name: collect test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage.postgres.out

    - name: upload diagnostics
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: diagnostics-integration-tests-postgres
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

    - name: collect test report
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: integration-tests-postgres.xml

  integration-tests-feature-gates:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: run integration tests
      run: make test.integration.dbless
      env:
        KONG_CONTROLLER_FEATURE_GATES: "GatewayAlpha=true,CombinedRoutes=false"
        GOTESTSUM_JUNITFILE: "integration-tests-feature-gates.xml"

    - name: collect test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage.featuregates.out

    - name: upload diagnostics
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: diagnostics-integration-tests-feature-gates
        path: /tmp/ktf-diag*
        if-no-files-found: ignore

    - name: collect test report
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: integration-tests-feature-gates.xml

  conformance-tests:
    runs-on: ubuntu-latest
    steps:

    - name: setup golang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19'

    - name: cache go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-build-codegen-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-build-codegen-

    - name: checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: run conformance tests
      run: make test.conformance
      env:
        GOTESTSUM_JUNITFILE: "conformance-tests.xml"

    - name: collect test report
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: tests-report
        path: conformance-tests.xml

  coverage:
    environment: "Configure ci"
    needs:
      - "unit-tests"
      - "integration-tests-dbless"
      - "integration-tests-postgres"
      - "integration-tests-enterprise-postgres"
      - "integration-tests-feature-gates"
    runs-on: ubuntu-latest
    steps:

    - name: collect test coverage artifacts
      id: download-coverage
      uses: actions/download-artifact@v3
      with:
        name: coverage
        path: coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        name: combined-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ${{steps.download-coverage.outputs.download-path}}
        fail_ci_if_error: true
        verbose: true

  buildpulse-report:
    environment: "Configure ci"
    needs:
      - "unit-tests"
      - "integration-tests-dbless"
      - "integration-tests-postgres"
      - "integration-tests-enterprise-postgres"
      - "integration-tests-feature-gates"
      - "conformance-tests"
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: download tests report
        id: download-coverage
        uses: actions/download-artifact@v3
        with:
          name: tests-report
          path: report

      - name: Upload test results to BuildPulse for flaky test detection
        if: ${{ !cancelled() }}
        uses: Workshop64/buildpulse-action@a0e683af4e5070c379e9801ee9b33792ff414936
        with:
          account: 962416
          repository: 127765544
          path: report/*.xml
          key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
          secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}
